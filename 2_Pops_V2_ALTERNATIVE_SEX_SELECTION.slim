////// SKELETON ON "SPACE IS PLACE" - https://github.com/kr-colab/spaceness/blob/master/slim_recipes/flat_map.slim
////// V2 Updates: Cross-population competition after expansion,NEXT: 2 biol sexes


initialize() { 
	initializeSLiMModelType("nonWF");  //////// Slim Command to iniitiate NON-WF models
	initializeSLiMOptions(dimensionality="xy"); //////// Initiate 2 dimmentional space
	initializeSex(); ////// Initiate Seperation of Biological Sex
	
	// This model uses tree-sequence recording, but it is optional
	initializeTreeSeq();    //////// Initiate tree-sequence recording
	
	defaults = Dictionary(
		"SEED", getSeed(),
		"SD", 0.5,         // sigma_D, dispersal distance //// Is only used to move new born individuals in "early" //// higher => increased movement
		"SX", 0.5,         // sigma_X, interaction distance for measuring local density //// Used to create an interaction, which is then used for reducing fitness based on the proximity of other individuals
		"SM", 0.5,         // sigma_M, mate choice distance //// Used to create an interaction, which is then used to pick a candidate for mating
		"K", 5,            // carrying capacity per unit area //// Used to calcualte RHO= FECUN / ((1 + FECUN) * K)) //// Used for initial population number of individuals = K * WIDTH * HEIGHT
		"LIFETIME", 4,     // average life span ////
		"WIDTH", 20.0,     // width of the simulated area ////
		"HEIGHT", 20.0,    // height of the simulated area ////
		"RUNTIME", 10000,    // total number of ticks to run the simulation for ////
		"REMOVE_BOUNDARIES", 500, // Timeline of Simulation,
		"L", 1e8,          // genome length ////
		"R", 1e-8,         // recombination rate ////
		"MU", 0.00000            // mutation rate ////
		);	
	
	// Set up parameters with a user-defined function
	setupParams(defaults);
	
	// Set up constants that depend on externally defined parameters
	defineConstant("FECUN", 1 / LIFETIME);
	defineConstant("RHO", FECUN / ((1 + FECUN) * K));
	defineConstant("PARAMS", defaults);
	
	
	setSeed(SEED);
	
	// basic neutral genetics
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	initializeRecombinationRate(R);
	
	// spatial interaction for local density measurement
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3 * SX); //// Initiate a local interaction using the 3*SX as maximum distance
	i1.setInteractionFunction("n", 1.0/(2*PI*SX^2), SX); ///// and make it a normal distribution with a mean of 1.0/(2*PI*SX^2)
	
	// spatial interaction for mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3 * SM); //// Initiate a local interaction using the 3*SM as maximum distance
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM); ///// and make it a normal distribution with a mean of 1.0/(2*PI*SM^2)

	// spatial interaction for local density measurement
	initializeInteractionType(3, "xy", reciprocal=T, maxDistance=3 * SX); //// Initiate a local interaction using the 3*SX as maximum distance
	i3.setInteractionFunction("n", 1.0/(2*PI*SX^2), SX); ///// and make it a normal distribution with a mean of 1.0/(2*PI*SX^2)
	
	// spatial interaction for mate choice
	initializeInteractionType(4, "xy", reciprocal=T, maxDistance=3 * SM); //// Initiate a local interaction using the 3*SM as maximum distance
	i4.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM); ///// and make it a normal distribution with a mean of 1.0/(2*PI*SM^2)

	i2.setConstraints("receiver", sex="F", minAge=1, maxAge=40);
    i2.setConstraints("exerter", sex="M", minAge=1);



}

1 first() {
	
	/// Set up pop1
	sim.addSubpop("p1", asInteger(500));  ////// add Initial population 
	p1.setSpatialBounds(c(0, 0, 9, 9));   /////// Add spatial bounds for population 1
	p1.individuals.setSpatialPosition(p1.pointUniform(p1.individualCount));  ///// Place Individuals from pop1 into spatial boundaries of population 1
	
	/// Set up pop2
	sim.addSubpop("p2", asInteger(500));  ////// add Initial population 
	p2.setSpatialBounds(c(11, 11, 20, 20));   /////// Add spatial bounds for population 1
	p2.individuals.setSpatialPosition(p2.pointUniform(p2.individualCount));  ///// Place Individuals from pop1 
	
	//////
	log = community.createLogFile(OUTDIR + "/Spatial_Simulations_SLim"+"sim_log.txt", logInterval=1000);
	log.addCycle();
	///// log.addCustomColumn("FST", "calcFST(p1.haplosomes, p2.haplosomes);");


}


REMOVE_BOUNDARIES first() {
	p1.setSpatialBounds(c(0, 0, 20, 20));
	p2.setSpatialBounds(c(0, 0, 20, 20));
}


first() {
	// preparation for the reproduction() callback
	i2.evaluate(p1);
	i2.evaluate(p2);
	
}


reproduction() { ///// Works for both populations
	
	mate = i2.drawByStrength(individual, 1);
	///print(c(individual.subpopulation,mate.subpopulation));
	
	
	///// Once Boundaries are off, give option for other population
	GEN=sim.cycle;
	if (GEN>REMOVE_BOUNDARIES){
	mate1 = i2.drawByStrength(individual, 1, p1);
	mate2 = i2.drawByStrength(individual, 1, p2);
	possible_mates=c(mate1,mate2);
	if (possible_mates.size()){
	mate = sample(possible_mates,1);
	}
	}	
	
	
	if (mate.size())
		subpop.addCrossed(individual, mate, count=rpois(1, 3*FECUN));	
	
	
	
	
}



/////////////////////////////////////////////
//////////// DISPERSAL AND SURVIVAL ////////

early() {
	///////////////////////
	//// Disperse offspring
	offspring_p1 = p1.subsetIndividuals(maxAge=0);
	offspring_p2 = p2.subsetIndividuals(maxAge=0);
	
	p1.deviatePositions(offspring_p1, "stopping", 1, "n", SD); /////// population_name.deviatePositions(vector_of_individuals, what_happens_at_boundaries ,cutoff_to_zero_at_specific_distance (max distnace?) ,normal_distribution ,mean of distribution)
	p2.deviatePositions(offspring_p2, "stopping", 1, "n", SD); /////// population_name.deviatePositions(vector_of_individuals, what_happens_at_boundaries ,cutoff_to_zero_at_specific_distance (max distnace?) ,normal_distribution ,mean of distribution)
	
	
	
	
	///////////////////////////////////////////////////////////
	// Measure local density and use it for density regulation
	i1.evaluate(p1);
	i3.evaluate(p2);
	
	inds_p1 = p1.individuals;
	inds_p2 = p2.individuals;

	
	
	competition_p1 = i1.localPopulationDensity(inds_p1);
	competition_p2 = i3.localPopulationDensity(inds_p2);
	
	GEN=sim.cycle;
	if (GEN>REMOVE_BOUNDARIES){
	
	i3.evaluate(p1);
	i1.evaluate(p2);
	
	competition_p1 = competition_p1 + i3.localPopulationDensity(inds_p1);
	competition_p2 = competition_p2 + i1.localPopulationDensity(inds_p2);
	
	}
	
	
	
	
	
	inds_p1.fitnessScaling = pmin(0.95,(1 / (1 + RHO * competition_p1)));
	inds_p2.fitnessScaling = pmin(0.95,(1 / (1 + RHO * competition_p2)));
	
	
}





//////////////////////////////
//////////// END OF SIMULATION

late() {
	if (p1.individualCount == 0) {
		catn("Population went extinct! Ending the simulation.");
		sim.simulationFinished();
	}
}

RUNTIME late() {
	catn("End of simulation (run time reached)");
	sim.treeSeqOutput(OUTPATH_TREE, metadata=PARAMS); //// Output Tree Sequences into predefined output file
	sim.outputFull(OUTPATH_FULL);
	sim.simulationFinished();
	
}






/////////////////////////
//////////// OUTPUT STUFF
function (void)setupParams(object<Dictionary>$ defaults)
{
	if (!exists("PARAMFILE")) defineConstant("PARAMFILE", "./params.json");
	if (!exists("OUTDIR")) defineConstant("OUTDIR", "./Slim_Spatial_Models/Examples_From_Chevy_2025");
	defaults.addKeysAndValuesFrom(Dictionary("PARAMFILE", PARAMFILE, "OUTDIR", OUTDIR));
	
	if (fileExists(PARAMFILE)) {
		defaults.addKeysAndValuesFrom(Dictionary(readFile(PARAMFILE)));
		defaults.setValue("READ_FROM_PARAMFILE", PARAMFILE);
	}
	
	defaults.setValue("OUTBASE", OUTDIR + "/Spatial_Simulations_SLim" ); ///// Name of Base for Outputfiles e.g. you can make unique runs with + defaults.getValue("SEED")
	
	defaults.setValue("OUTPATH_TREE", defaults.getValue("OUTBASE") + ".trees");  ///// Tree sequences name
	
	defaults.setValue("OUTPATH_FULL", defaults.getValue("OUTBASE") + ".output_full");  ///// Tree sequences 
	
	defaults.setValue("OUTPATH", defaults.getValue("OUTBASE") + ".trees");  ///// Tree sequences 
	
	for (k in defaults.allKeys) {
		if (!exists(k))
			defineConstant(k, defaults.getValue(k));
		else
			defaults.setValue(k, executeLambda(k + ";"));
	}
	
	// print out default values
	catn("===========================");
	catn("Model constants: " + defaults.serialize("pretty"));
	catn("===========================");
}